diff --git a/config.def.h b/config.def.h
index defa426..46068ee 100644
--- a/config.def.h
+++ b/config.def.h
@@ -14,6 +14,8 @@ static const char titletrim[]   = "...";
 static const int  tabwidth      = 200;
 static const Bool foreground    = True;
 static       Bool urgentswitch  = False;
+static       Bool hidebar       = False;
+static       Bool hidebarifalone= True;
 
 /*
  * Where to place a new tab when it is opened. When npisrelative is True,
@@ -39,6 +41,7 @@ static Key keys[] = {
 	{ MODKEY|ShiftMask,     XK_Return, focusonce,   { 0 } },
 	{ MODKEY|ShiftMask,     XK_Return, spawn,       { 0 } },
 
+	{ MODKEY|Mod1Mask,      XK_t,      togglebar,   { 0 } },
 	{ MODKEY|ShiftMask,     XK_l,      rotate,      { .i = +1 } },
 	{ MODKEY|ShiftMask,     XK_h,      rotate,      { .i = -1 } },
 	{ MODKEY|ShiftMask,     XK_j,      movetab,     { .i = -1 } },
diff --git a/tabbed.c b/tabbed.c
index ff3ada0..ccc6283 100644
--- a/tabbed.c
+++ b/tabbed.c
@@ -84,6 +84,7 @@ typedef struct {
 	int tabx;
 	Bool urgent;
 	Bool closed;
+	XSizeHints *size_hints;
 } Client;
 
 /* function declarations */
@@ -114,10 +115,15 @@ static void initfont(const char *fontstr);
 static void killclient(const Arg *arg);
+static void updatesizehints(Client *c);
 static void manage(Window win);
 static void maprequest(const XEvent *e);
 static void move(const Arg *arg);
 static void movetab(const Arg *arg);
 static void propertynotify(const XEvent *e);
+static void fit(int c);
+static void setgeo(int c, int x, int y, int w, int h);
+/* Deprecated. Left for compatibility. */
 static void resize(int c, int w, int h);
+static void togglebar(const Arg *arg);
 static void rotate(const Arg *arg);
 static void run(void);
 static void sendxembed(int c, long msg, long detail, long d1, long d2);
@@ -178,6 +184,10 @@ char *argv0;
 void
 buttonpress(const XEvent *e)
 {
+	if (hidebar || (nclients <= 1 && hidebarifalone)) {
+		return;
+	}
+
 	const XButtonPressedEvent *ev = &e->xbutton;
 	int i, fc;
 	Arg arg;
@@ -257,7 +267,7 @@ configurenotify(const XEvent *e)
 		dc.drawable = XCreatePixmap(dpy, root, ww, wh,
 		              DefaultDepth(dpy, screen));
 		if (sel > -1)
-			resize(sel, ww, wh - bh);
+			fit(sel);
 		XSync(dpy, False);
 	}
 }
@@ -266,18 +276,10 @@ void
 configurerequest(const XEvent *e)
 {
 	const XConfigureRequestEvent *ev = &e->xconfigurerequest;
-	XWindowChanges wc;
 	int c;
 
 	if ((c = getclient(ev->window)) > -1) {
-		wc.x = 0;
-		wc.y = bh;
-		wc.width = ww;
-		wc.height = wh - bh;
-		wc.border_width = 0;
-		wc.sibling = ev->above;
-		wc.stack_mode = ev->detail;
-		XConfigureWindow(dpy, clients[c]->win, ev->value_mask, &wc);
+		fit(c);
 	}
 }
 
@@ -318,11 +321,11 @@ drawbar(void)
 	int c, cc, fc, width;
 	char *name = NULL;
 
-	if (nclients == 0) {
+	if (nclients == 0 || hidebar || (nclients == 1 && hidebarifalone)) {
 		dc.x = 0;
 		dc.w = ww;
 		XFetchName(dpy, win, &name);
-		drawtext(name ? name : "", dc.norm);
+		drawtext((name && !hidebar && !hidebarifalone) ? name : "", dc.norm);
 		XCopyArea(dpy, dc.drawable, win, dc.gc, 0, 0, ww, bh, 0, 0);
 		XSync(dpy, False);
 
@@ -454,7 +457,7 @@ focus(int c)
 	if (c < 0 || c >= nclients)
 		return;
 
-	resize(c, ww, wh - bh);
+	fit(c);
 	XRaiseWindow(dpy, clients[c]->win);
 	XSetInputFocus(dpy, clients[c]->win, RevertToParent, CurrentTime);
 	sendxembed(c, XEMBED_FOCUS_IN, XEMBED_FOCUS_CURRENT, 0, 0);
@@ -686,6 +689,17 @@ killclient(const Arg *arg)
 	}
 }
 
+void
+updatesizehints(Client *c) {
+	long supplied_return;
+	if (XGetWMNormalHints(dpy, c->win, c->size_hints, &supplied_return) == 0) {
+		c->size_hints->flags = 0;
+	}
+	else {
+		c->size_hints->flags &= supplied_return;
+	}
+}
+
 void
 manage(Window w)
 {
@@ -716,8 +730,13 @@ manage(Window w)
 
 		c = ecalloc(1, sizeof *c);
 		c->win = w;
+		c->size_hints = XAllocSizeHints();
+		updatesizehints(c);
 
 		nclients++;
+		if (nclients == 2 && hidebarifalone) {
+			fit(0);
+		}
 		clients = erealloc(clients, sizeof(Client *) * nclients);
 
 		if(npisrelative) {
@@ -859,6 +878,10 @@ propertynotify(const XEvent *e)
 			}
 		}
 		XFree(wmh);
+	} else if (ev->atom == XA_WM_NORMAL_HINTS &&
+		   (c = getclient(ev->window)) > -1) {
+		updatesizehints(clients[c]);
+		fit(c);
 	} else if (ev->state != PropertyDelete && ev->atom == XA_WM_NAME &&
 	           (c = getclient(ev->window)) > -1) {
 		updatetitle(c);
@@ -867,12 +890,27 @@ propertynotify(const XEvent *e)
 
 void
 resize(int c, int w, int h)
+{
+	setgeo(c, 0, bh, w, h);
+}
+
+void fit(int c)
+{
+	if (hidebar || (nclients <= 1 && hidebarifalone)) {
+		setgeo(c, 0, 0, ww, wh);
+	} else {
+		setgeo(c, 0, bh, ww, wh - bh);
+	}
+}
+
+void
+setgeo(int c, int x, int y, int w, int h)
 {
 	XConfigureEvent ce;
 	XWindowChanges wc;
 
-	ce.x = 0;
-	ce.y = bh;
+	ce.x = wc.x = x;
+	ce.y = wc.y = y;
 	ce.width = wc.width = w;
 	ce.height = wc.height = h;
 	ce.type = ConfigureNotify;
@@ -883,11 +921,47 @@ resize(int c, int w, int h)
 	ce.override_redirect = False;
 	ce.border_width = 0;
 
-	XConfigureWindow(dpy, clients[c]->win, CWWidth | CWHeight, &wc);
+	if (clients[c]->size_hints->flags & PResizeInc &&
+	    clients[c]->size_hints->width_inc > 0 &&
+	    clients[c]->size_hints->height_inc > 0) {
+		unsigned int dx = w;
+		unsigned int dy = h;
+		if (clients[c]->size_hints->flags & PBaseSize) {
+			dx -= clients[c]->size_hints->base_width;
+			dy -= clients[c]->size_hints->base_height;
+		}
+
+		dx %= clients[c]->size_hints->width_inc;
+		dy %= clients[c]->size_hints->height_inc;
+
+		wc.x += dx >> 1;
+		wc.width -= dx;
+		wc.y += dy >> 1;
+		wc.height -= dy;
+	}
+
+	XConfigureWindow(dpy, clients[c]->win, CWX | CWY | CWWidth | CWHeight, &wc);
 	XSendEvent(dpy, clients[c]->win, False, StructureNotifyMask,
 	           (XEvent *)&ce);
 }
 
+void togglebar(const Arg *arg)
+{
+	int i;
+
+	if (nclients == 1) {
+		hidebarifalone = !hidebarifalone;
+	}
+	else if (nclients > 1) {
+		hidebar = !hidebar;
+	}
+
+	for (i = 0; i < nclients; ++i) {
+		fit(i);
+	}
+	drawbar();
+}
+
 void
 rotate(const Arg *arg)
 {
@@ -1128,15 +1202,18 @@ unmanage(int c)
 	if (c == 0) {
 		/* First client. */
 		nclients--;
+		XFree(clients[0]->size_hints);
 		free(clients[0]);
 		memmove(&clients[0], &clients[1], sizeof(Client *) * nclients);
 	} else if (c == nclients - 1) {
 		/* Last client. */
 		nclients--;
+		XFree(clients[c]->size_hints);
 		free(clients[c]);
 		clients = erealloc(clients, sizeof(Client *) * nclients);
 	} else {
 		/* Somewhere inbetween. */
+		XFree(clients[c]->size_hints);
 		free(clients[c]);
 		memmove(&clients[c], &clients[c+1],
 		        sizeof(Client *) * (nclients - (c + 1)));
