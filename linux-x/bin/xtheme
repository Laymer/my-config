#!/usr/bin/env python3
"""
A utility to tune the current (xresource) color themes.
"""

import json
import os, sys
import colour
import subprocess as sp
import io
import argparse

DEFAULT_COLOR_JSON_PATH = os.path.join(os.environ["HOME"], ".cache/wal/colors.json")
SPECIAL_COLORS = ["foreground", "background", "cursor"]

def load_json(path):
    if path == "":
        path = DEFAULT_COLOR_JSON_PATH
    with open(path, "r") as f:
        json_data = json.load(f)
    data = {}
    for i in range(len(SPECIAL_COLORS)):
        if SPECIAL_COLORS[i] in json_data["special"]:
            data[SPECIAL_COLORS[i]] = json_data["special"][SPECIAL_COLORS[i]]
    for i in range(16):
        name = "color{}".format(i)
        if name in json_data["colors"]:
            data[name] = json_data["colors"][name]
    return data

def apply_color(data):
    for i in range(len(SPECIAL_COLORS)):
        if SPECIAL_COLORS[i] in data:
            sys.stdout.write("\033]{};{}\007".format(10 + i, data[SPECIAL_COLORS[i]]))
    for i in range(16):
        name = "color{}".format(i)
        if name in data:
            sys.stdout.write("\033]4;{};{}\007".format(i, data[name]))

def load_xresource(path):
    data = { }
    if path is None or path == "":
        f = io.StringIO(sp.check_output(["xrdb","-query"]).decode("utf-8"))
    else:
        f = open(path, "r")
    # The current parssing is very rough
    for line in f:
        kv = line.split(":", 1)
        for kw in SPECIAL_COLORS:
            if kw in kv[0] and kw not in data:
                data[kw] = kv[1].strip()
        for i in range(16):
            kw = "color{}".format(i)
            if kw in kv[0] and kw not in data:
                data[kw] = kv[1].strip()
    return data

def print_format_table():
    print("The quick brown fox jumps over the lazy dog.")
    for bg in range(40,48):
        format = ";".join(["0", str(bg - 10), str(bg)])
        sys.stdout.write('\x1b[%sm %s \x1b[0m' % (format, "██"))
    sys.stdout.write("\n")
    for bg in range(100,108):
        format = ";".join(["0", str(bg - 10), str(bg)])
        sys.stdout.write('\x1b[%sm %s \x1b[0m' % (format, "██"))
    sys.stdout.write("\n")

def adjust_brightness(data, selector, amount):
    print(selector)
    colors = {}
    for k in data:
        colors[k] = colour.Color(data[k])
        if k in selector:
            colors[k].luminance = min(1, max(0, colors[k].luminance + amount))
    for k in colors:
        colors[k] = colors[k].hex_l
    return colors

def adjust_saturation(data, selector, amount):
    colors = {}
    for k in data:
        colors[k] = colour.Color(data[k])
        if k in selector:
            colors[k].saturation = min(1, max(0, colors[k].saturation + amount))
    for k in colors:
        colors[k] = colors[k].hex_l
    return colors

def write_output(data, path):
    with open(path, "w") as f:
        for kw in SPECIAL_COLORS:
            if kw in data:
                f.write("*{}: {}\n".format(kw, data[kw]))
        for i in range(16):
            kw = "color{}".format(i)
            if kw in data:
                f.write("*{}: {}\n".format(kw, data[kw]))

parser = argparse.ArgumentParser()
parser.add_argument("-j", "--json", dest = "json_input")
parser.add_argument("-x", "--xres", dest = "xres_input")
parser.add_argument("-o", "--output", dest = "output")
parser.add_argument("--brightness", type = float)
parser.add_argument("commands", metavar = "CMD", nargs = "*")
args = parser.parse_args()

if args.json_input is not None:
    data = load_json(args.json_input)
elif args.xres_input is not None:
    data = load_xresource(args.xres_input)
else:
    data = load_xresource(None)

selector_stack = []
selector = SPECIAL_COLORS + ["color{}".format(i) for i in range(16)]
i = 0
cmds = args.commands
while i < len(cmds):
    cmd = cmds[i]
    i += 1

    if cmd == "brightness" and i < len(cmds):
        data = adjust_brightness(data, selector, float(cmds[i]))
        i += 1
    elif cmd == "saturation" and i < len(cmds):
        data = adjust_saturation(data, selector, float(cmds[i]))
        i += 1
    elif (cmd == "+" or cmd == "-" or cmd == "=") and i < len(cmds):
        if cmds[i] == "all":
            target = SPECIAL_COLORS + ["color{}".format(i) for i in range(16)]
        elif cmds[i] == "regular":
            target = ["color{}".format(i) for i in range(16)]
        elif cmds[i] == "special":
            target = list(SPECIAL_COLORS)
        elif cmds[i] in data:
            target = [cmds[i]]
        else:
            target = None

        if target is not None:
            if cmd == "+":
                for k in target:
                    if k not in selector:
                        selector.append(k)
            elif cmd == "-":
                for k in target:
                    if k in selector:
                        selector.remove(k)
            elif cmd == "=":
                selector = target

            i += 1
    elif cmd == "pushsel":
        selector_stack.append(selector)
        selector = SPECIAL_COLORS + ["color{}".format(i) for i in range(16)]
    elif cmd == "popsel":
        if len(selector_stack) > 0:
            selector = selector_stack[len(selector_stack)].pop()
    elif cmd == "swap" and i + 1 < len(cmds):
        if cmds[i] in data and cmds[i + 1] in data:
            tmp = data[cmds[i]]
            data[cmds[i]] = data[cmds[i + 1]]
            data[cmds[i + 1]] = tmp
            i += 2
    elif cmd == "set" and i + 1 < len(cmds):
        if cmds[i] in data and cmds[i + 1] in data:
            data[cmds[i]] = data[cmds[i + 1]]
            i += 2

apply_color(data)
print_format_table()

if args.output is not None:
    write_output(data, args.output)
