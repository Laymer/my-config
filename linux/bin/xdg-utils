#!/usr/bin/env python3
"""
Example: [this file] firefox-esr.desktop chromium.desktop
"""

import sys, os
from xdg import XDG_DATA_DIRS
from configparser import RawConfigParser
import logging
import subprocess

if len(sys.argv) < 2:
    print("Example: [this file] firefox-esr.desktop chromium.desktop")
    sys.exit(1)

target = sys.argv[1]
replace = sys.argv[2] if len(sys.argv) >= 3 else None

logging.basicConfig(level = logging.INFO)
logger = logging.getLogger(__file__)

def find_in_paths(filename, paths):
    ret = []
    for path in paths:
        for fn in os.listdir(path):
            if fn == filename:
                ret.append(os.path.join(path, fn))
    return ret

dirs = [os.path.join(p, "applications") for p in XDG_DATA_DIRS]
results = find_in_paths("mimeinfo.cache", dirs)

if len(results) == 0:
    sys.stderr.write("Cannot find mimeinfo.cache in {}\n".format(dirs))
    sys.exit(1)

data = RawConfigParser()
with open(results[1], "r") as f:
    data.read_file(f)

for mime, apps_str in data.items("MIME Cache"):
    apps = list(filter(len, apps_str.split(";")))
    if target not in apps:
        continue
    if replace is None:
        sys.stdout.write("{}:{}\n".format(mime, " ".join(apps)))
    else:
        logger.debug("Found mimetype {} with apps {}".format(mime, apps))
        if len(apps) == 1:
            logger.info("Skip {} since {} is the only app".format(mime, target))
            continue
        if apps[0] != target:
            logger.info("Skip {} since {} is not the first app".format(mime, target))
            continue
        if replace not in apps:
            logger.info("Skip {} since {} is not in apps".format(mime, replace))
            continue
        cmd = ["xdg-mime", "default",  replace, mime]
        logger.info("Calling {}".format(cmd))
        subprocess.check_call(" ".join(cmd), shell = True)
