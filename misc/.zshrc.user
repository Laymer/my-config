if [[ ! ":$PATH:" =~ ":/usr/local/bin:" ]]; then
   export PATH="/usr/local/bin:$PATH"
fi

if [[ ! ":$PATH:" =~ ":/usr/local/sbin:" ]]; then
   export PATH="/usr/local/sbin:$PATH"
fi

if [[ ! ":$PATH:" =~ ":$HOME/bin:" ]]; then
   export PATH="$HOME/bin:$PATH"
fi

if [[ -z "$SHELL" ]]; then
    export SHELL=`command -v zsh`
fi

alias my-path="source my-path"
alias e="my-emacs -nw"
alias e-reset="emacsclient --alternate-editor=true -e '(kill-emacs)'"
alias g="git"
alias s="sudo"
alias o="open"
alias xclip="xclip -selection clipboard"
alias emacs="emacs -nw"
alias lt="ll --sort=time -r"

if type -p dircolors > /dev/null; then
    if [[ "$TERM" = dvtm || "$TERM" = dvtm-* ]]; then
        eval `TERM=xterm${TERM#dvtm} dircolors`
    else
        eval `dircolors`
    fi
fi

local ret_status="%(?:%{$fg_bold[green]%}-:%{$fg_bold[red]%}%?)"

ZSH_THEME_GIT_PROMPT_PREFIX="git:(%{$fg[red]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%}) %{$fg[yellow]%}(x)%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%})"
DISABLE_AUTO_TITLE=true

# cloned from lib/termsupport.sh
function my_title {
  emulate -L zsh
  setopt prompt_subst

  [[ "$EMACS" == *term* ]] && return

  # if $2 is unset use $1 as default
  # if it is set and empty, leave it as is
  : ${2=$1}

  case "$TERM" in
    cygwin|xterm*|putty*|rxvt*|ansi)
      print -Pn "\e]2;$2:q\a" # set window name
      print -Pn "\e]1;$1:q\a" # set tab name
      ;;
    screen*)
      print -Pn "\e]2;$2:q\a" # set window name
      print -Pn "\ek$1:q\e\\" # set screen hardstatus
      ;;
    *)
      if [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
        print -Pn "\e]2;$2:q\a" # set window name
        print -Pn "\e]1;$1:q\a" # set tab name
      else
        # Try to use terminfo to set the title
        # If the feature is available set title
        if [[ -n "$terminfo[fsl]" ]] && [[ -n "$terminfo[tsl]" ]]; then
	  echoti tsl
	  print -Pn "$1"
	  echoti fsl
	fi
      fi
      ;;
  esac
}

setopt NO_HUP
setopt NO_CHECK_JOBS
setopt NO_SHARE_HISTORY

if [[ $TERM = "dumb" ]]; then
    unsetopt zle
    PS1='$ '
fi

bindkey "\e[1;3D"  backward-word
bindkey "\e[1;5D"  backward-word
bindkey "\e[1;3C"  forward-word
bindkey "\e[1;5C"  forward-word
bindkey "\e[47;5u" undo
bindkey "\e[47;7u" redo
bindkey "^W"       kill-region

if [[ -e "$HOME/.zshrc.user.os" ]]; then
   source "$HOME/.zshrc.user.os"
fi

autoload -Uz add-zsh-hook

preexec_date() {
    emulate -L zsh
    setopt extended_glob

    # cmd name only, or if this is sudo or ssh, the next cmd
    local CMD=${1[(wr)^(*=*|sudo|ssh|mosh|rake|-*)]:gs/%/%%}
    local LINE="${2:gs/%/%%}"
    local DATE="$(date '+%H:%M:%S %y-%m-%d')"

    my_title '$CMD' '[$DATE] %100>...>$LINE%<<'

    if [[ "$1" == *$'\n'* ]]; then
        # print simple time for multiline command
        echo -e "$fg_bold[green][${DATE}]$reset_color"
    elif [[ "$MY_PROMPT_MODE" = "0" ]]; then
        # Assume expr length S calculate the char width of S on terminal.
        # This would work only for regular ascii cmd ...
        local temp="$1$(print -P %c)"
        C=$(( ( ${#temp} + 20 ) / $COLUMNS + 1 ))
        echo -ne "\033[${C}A$fg_bold[green][${DATE}]$reset_color\033[${C}B\r"
        # export TIME_PREEXEC=`date +%s`
    else
        # similar to above, but don't count the pwd in
        C=$(( ( ${#1} + 19 ) / $COLUMNS + 1 ))
        echo -ne "\033[${C}A$fg_bold[green][${DATE}]$reset_color\033[${C}B\r"
    fi
}

precmd_date() {
    emulate -L zsh

    # export TIME_PRECMD=`date +%s`
    export DATE_PRECMD="$(date '+%H:%M:%S %y-%m-%d')"

    my_title $ZSH_THEME_TERM_TAB_TITLE_IDLE $ZSH_THEME_TERM_TITLE_IDLE
}

LSPACE() {
  [[ $# > 0 ]] && echo -n ' '
  echo $@
}

add-zsh-hook preexec preexec_date
add-zsh-hook precmd precmd_date

set_prompt() {
  if [[ "$MY_PROMPT_MODE" = "1" ]]; then
    PROMPT='${ret_status}%{$fg_bold[green]%}:${SSH_TTY:+%n@%m:}%j%{$fg_bold[blue]%} %{$fg_bold[cyan]%}%~%{$fg_bold[blue]%}$(LSPACE $(git_prompt_info))%{$reset_color%}
 %{$fg_bold[green]%}${DATE_PRECMD} %{$reset_color%}'
    RPROMPT=''
  else
    RPROMPT=' %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%} ${ret_status}%{$fg_bold[green]%}%p:${SSH_TTY:+%n@%m:}%j%{$reset_color%}'
    PROMPT=' %{$fg_bold[green]%}${DATE_PRECMD} %{$fg_bold[cyan]%}%c%{$reset_color%} '
  fi

  if [[ -n "$MC_SID" ]]; then
    RPROMPT=''
  fi
}

MY_PROMPT_MODE=0
set_prompt

change_prompt() {
  if [ "$MY_PROMPT_MODE" = "0" ]; then MY_PROMPT_MODE=1
  elif [ "$MY_PROMPT_MODE" = "1" ]; then MY_PROMPT_MODE=0
  fi
  set_prompt
  zle reset-prompt
}
zle -N change_prompt

bindkey "^P" change_prompt
